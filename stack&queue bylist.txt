#include <iostream>
using namespace std;

const int MAX = 1000;

//stack
struct Stack {
    int arr[MAX];
    int top;

    Stack() { top = -1; }

    bool isEmpty() { return top == -1; }
    bool isFull()  { return top == MAX - 1; }

    void push(int x) {
        if (isFull()) {
            cout << "Stack day!\n"; return;
        }
        arr[++top] = x;
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack rong!\n"; return;
        }
        top--;
    }

    int peek() {
        if (isEmpty()) return -1;
        return arr[top];
    }
};

//queuee
struct Queue {
    int arr[MAX];
    int front, rear, size;

    Queue() { front = 0; rear = -1; size = 0; }

    bool isEmpty() { return size == 0; }
    bool isFull()  { return size == MAX; }

    void enqueue(int x) {
        if (isFull()) {
            cout << "Queue day!\n"; return;
        }
        rear = (rear + 1) % MAX;
        arr[rear] = x;
        size++;
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Queue rong!\n"; return;
        }
        front = (front + 1) % MAX;
        size--;
    }

    int peek() {
        if (isEmpty()) return -1;
        return arr[front];
    }
};

int main() {
    Stack st;
    st.push(10);
    st.push(20);
    st.push(30);
    cout << "Stack top: " << st.peek() << endl; 
    st.pop();
    cout << "Stack top sau pop: " << st.peek() << endl; 

    Queue q;
    q.enqueue(5);
    q.enqueue(15);
    q.enqueue(25);
    cout << "Queue front: " << q.peek() << endl; 
    q.dequeue();
    cout << "Queue front sau dequeue: " << q.peek() << endl; 
}
