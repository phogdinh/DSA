#include <iostream>
using namespace std;


struct Node {
    int data;
    Node* next;
};

//stack
struct Stack {
    Node* top;
    Stack() { top = nullptr; }

    bool isEmpty() { return top == nullptr; }

    void push(int x) {
        Node* node = new Node{x, top};
        top = node;
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack rong!\n"; return;
        }
        Node* temp = top;
        top = top->next;
        delete temp;
    }

    int peek() {
        if (isEmpty()) return -1;
        return top->data;
    }
};

//queue
struct Queue {
    Node* front;
    Node* rear;
    Queue() { front = rear = nullptr; }

    bool isEmpty() { return front == nullptr; }

    void enqueue(int x) {
        Node* node = new Node{x, nullptr};
        if (rear == nullptr) {
            front = rear = node;
        } else {
            rear->next = node;
            rear = node;
        }
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Queue rong!\n"; return;
        }
        Node* temp = front;
        front = front->next;
        if (front == nullptr) rear = nullptr;
        delete temp;
    }

    int peek() {
        if (isEmpty()) return -1;
        return front->data;
    }
};

int main() {
    Stack st;
    st.push(100);
    st.push(200);
    cout << "Stack top: " << st.peek() << endl; 
    st.pop();
    cout << "Stack top sau pop: " << st.peek() << endl; 

    Queue q;
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    cout << "Queue front: " << q.peek() << endl;
    q.dequeue();
    cout << "Queue front sau dequeue: " << q.peek() << endl; 
}
